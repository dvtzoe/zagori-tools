{
  "openapi": "3.1.0",
  "info": {
    "title": "Zagori Tools",
    "description": "Tool server that proxies requests to the Notion API for ChatGPT.",
    "version": "0.2.2"
  },
  "paths": {
    "/healthz": {
      "get": {
        "tags": [
          "internal"
        ],
        "summary": "Health Check",
        "description": "Simple readiness probe for deployment environments.",
        "operationId": "health_check_healthz_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/notion/request": {
      "post": {
        "tags": [
          "notion"
        ],
        "summary": "Proxy Notion Request",
        "description": "Forward a request to Notion and return the raw response for LLM consumption.\n\nThis endpoint acts as a comprehensive proxy to the Notion API, supporting all \nNotion operations through a single interface. It automatically handles:\n- Authentication via Bearer token\n- API versioning (currently 2024-05-01)\n- Request/response format conversion\n- Error handling and status code propagation\n\nUse this to perform any Notion operation including:\n- Managing pages, databases, and blocks\n- Querying and filtering content  \n- Creating and updating properties\n- Searching across workspaces\n- Managing users and permissions\n\nThe response includes the raw Notion API response plus metadata for debugging.",
        "operationId": "proxy_notion_request_notion_request_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotionProxyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionProxyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthResponse": {
        "properties": {
          "status": {
            "type": "string",
            "const": "ok",
            "title": "Status"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "HealthResponse",
        "description": "Response payload for the health check endpoint."
      },
      "NotionProxyRequest": {
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "title": "Method",
            "description": "HTTP method for the Notion API request. Use GET for retrieval, POST for creation and queries, PATCH for updates, DELETE for removal."
          },
          "path": {
            "type": "string",
            "title": "Path",
            "description": "\n        Notion API endpoint path (without the base URL). Examples:\n        - '/v1/pages' (create page)\n        - '/v1/pages/{page_id}' (get/update page)\n        - '/v1/databases/{database_id}' (get database)\n        - '/v1/databases/{database_id}/query' (query database)\n        - '/v1/blocks/{block_id}/children' (get/append block children)\n        - '/v1/search' (search pages and databases)\n        - '/v1/users' (list users)\n        - '/v1/comments' (create comment)\n        \n        Replace {page_id}, {database_id}, etc. with actual UUIDs (with or without hyphens).\n        "
          },
          "params": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Params",
            "description": "\n        Optional query parameters. Common examples:\n        - For pagination: {'start_cursor': 'cursor_value', 'page_size': 100}\n        - For filtering results: {'filter_properties': ['title']}\n        - For archived content: {'filter': {'property': 'object', 'value': 'page'}}\n        "
          },
          "body": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Body",
            "description": "\n        Optional JSON request body (ignored for GET requests). Structure varies by endpoint:\n        \n        For page creation (POST /v1/pages):\n        {\n            \"parent\": {\"database_id\": \"database_uuid\"},\n            \"properties\": {\n                \"title\": {\"title\": [{\"text\": {\"content\": \"Page Title\"}}]},\n                \"status\": {\"select\": {\"name\": \"In Progress\"}}\n            }\n        }\n        \n        For database queries (POST /v1/databases/{database_id}/query):\n        {\n            \"filter\": {\n                \"property\": \"Status\",\n                \"select\": {\"equals\": \"Done\"}\n            },\n            \"sorts\": [{\"property\": \"Created\", \"direction\": \"descending\"}],\n            \"page_size\": 50\n        }\n        \n        For block appending (PATCH /v1/blocks/{block_id}/children):\n        {\n            \"children\": [\n                {\n                    \"paragraph\": {\n                        \"rich_text\": [{\"text\": {\"content\": \"New paragraph text\"}}]\n                    }\n                }\n            ]\n        }\n        \n        For search (POST /v1/search):\n        {\n            \"query\": \"search term\",\n            \"filter\": {\"property\": \"object\", \"value\": \"page\"},\n            \"page_size\": 10\n        }\n        "
          }
        },
        "type": "object",
        "required": [
          "method",
          "path"
        ],
        "title": "NotionProxyRequest",
        "description": "Generic proxy request body for forwarding calls to the Notion API.\n\nThis tool allows you to make any Notion API call by specifying the HTTP method, \nendpoint path, query parameters, and request body. It supports all core Notion \noperations including pages, databases, blocks, users, and comments.\n\nCommon Notion API patterns:\n- Create a page: POST /v1/pages\n- Query a database: POST /v1/databases/{database_id}/query  \n- Retrieve a page: GET /v1/pages/{page_id}\n- Update page properties: PATCH /v1/pages/{page_id}\n- Append block children: PATCH /v1/blocks/{block_id}/children\n- Search content: POST /v1/search\n\nAuthentication is handled automatically via the NOTION_API_TOKEN environment variable."
      },
      "NotionProxyResponse": {
        "properties": {
          "status_code": {
            "type": "integer",
            "title": "Status Code",
            "description": "HTTP status code from Notion API. 200 for success, 400+ for errors."
          },
          "data": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Data",
            "description": "Raw JSON response from Notion API. Structure varies by endpoint. null for non-JSON responses."
          },
          "notion_request_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notion Request Id",
            "description": "Notion's request ID for debugging and support. Include this when reporting issues to Notion."
          }
        },
        "type": "object",
        "required": [
          "status_code",
          "data"
        ],
        "title": "NotionProxyResponse",
        "description": "Standardised response from Notion API calls.\n\nContains the HTTP status code, response data, and Notion's request ID for debugging.\nThe data field contains the raw JSON response from Notion's API, which varies by endpoint.\n\nCommon response structures:\n- Pages: Contains 'id', 'properties', 'parent', 'created_time', etc.\n- Databases: Contains 'id', 'title', 'properties' schema, 'parent', etc.\n- Query results: Contains 'results' array and 'next_cursor' for pagination\n- Errors: Contains 'object': 'error', 'status', 'code', 'message'"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}